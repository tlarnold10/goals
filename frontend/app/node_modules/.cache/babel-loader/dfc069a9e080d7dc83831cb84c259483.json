{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\TrevorArnold\\\\Documents\\\\programming\\\\goals\\\\frontend\\\\app\\\\src\\\\Goals.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst QUERY_GOALS = gql`\nquery {\n    allGoals {\n      summary,\n      details\n    }\n  }\n`;\nexport function GoalInfo() {\n  _s();\n\n  // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n  const {\n    data,\n    loading\n  } = useQuery(QUERY_GOALS, {\n    pollInterval: 500 // refetch the result every 0.5 second\n\n  }); // should handle loading status\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 23\n  }, this);\n  return data.allGoals.map(({\n    id,\n    summary,\n    details\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Goal - \", id, \": \", summary, \" \", details]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this));\n}\n\n_s(GoalInfo, \"uHu6+Av6iz/Cemw652GCrFuaHvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = GoalInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoalInfo\");","map":{"version":3,"sources":["C:/Users/TrevorArnold/Documents/programming/goals/frontend/app/src/Goals.js"],"names":["React","useQuery","gql","QUERY_GOALS","GoalInfo","data","loading","pollInterval","allGoals","map","id","summary","details"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,MAAMC,WAAW,GAAGD,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,OAAO,SAASE,QAAT,GAAoB;AAAA;;AACzB;AACA;AACA;AACA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBL,QAAQ,CAChCE,WADgC,EACnB;AACXI,IAAAA,YAAY,EAAE,GADH,CACO;;AADP,GADmB,CAAlC,CAJyB,CAUzB;;AACA,MAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,SAAOD,IAAI,CAACG,QAAL,CAAcC,GAAd,CAAkB,CAAC;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,OAAN;AAAeC,IAAAA;AAAf,GAAD,kBACvB;AAAA,2BACE;AAAA,4BACUF,EADV,QACgBC,OADhB,OAC0BC,OAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,KAAUF,EAAV;AAAA;AAAA;AAAA;AAAA,UADK,CAAP;AAOD;;GApBeN,Q;UAIYH,Q;;;KAJZG,Q","sourcesContent":["import React from 'react';\r\nimport { useQuery } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nconst QUERY_GOALS = gql`\r\nquery {\r\n    allGoals {\r\n      summary,\r\n      details\r\n    }\r\n  }\r\n`;\r\n\r\nexport function GoalInfo() {\r\n  // Polling: provides near-real-time synchronization with\r\n  // your server by causing a query to execute periodically\r\n  // at a specified interval\r\n  const { data, loading } = useQuery(\r\n    QUERY_GOALS, {\r\n      pollInterval: 500 // refetch the result every 0.5 second\r\n    }\r\n  );\r\n  \r\n  // should handle loading status\r\n  if (loading) return <p>Loading...</p>;\r\n   \r\n  return data.allGoals.map(({ id, summary, details }) => (\r\n    <div key={id}>\r\n      <p>\r\n        Goal - {id}: {summary} {details}\r\n      </p>\r\n    </div>\r\n  ));\r\n}"]},"metadata":{},"sourceType":"module"}