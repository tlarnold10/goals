{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\TrevorArnold\\\\Documents\\\\programming\\\\goals\\\\frontend\\\\app\\\\src\\\\Goals.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst QUERY_GOALS = gql`\nquery {\n    allGoals {\n      id\n      summary\n      details\n    }\n  }\n`;\nconst DELETE_GOAL = gql`\n  mutation DeleteGoal($id: ID!){\n    deleteGoal (id: $id) {\n      goal{\n        id\n        summary\n        details\n      }\n    }\n  }\n`;\n\nconst DeleteGoal = (keyId, deleteGoal) => {\n  let inputID;\n  inputID = keyId;\n  deleteGoal({\n    variables: {\n      id: inputID\n    }\n  });\n  window.location.reload();\n};\n\n_c = DeleteGoal;\nexport function GoalInfo() {\n  _s();\n\n  // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n  const {\n    data,\n    loading\n  } = useQuery(QUERY_GOALS, {\n    pollInterval: 500 // refetch the result every 0.5 second\n\n  });\n  const [deleteGoal] = useMutation(DELETE_GOAL); // should handle loading status\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 23\n  }, this);\n  return data.allGoals.map(({\n    id,\n    summary,\n    details\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [id, \": \", summary]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [details, /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"uk-button uk-button-danger\",\n        onClick: () => deleteGoal({\n          variables: {\n            id: id\n          }\n        }),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n      class: \"uk-divider-icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this));\n}\n\n_s(GoalInfo, \"WMx4TuSfDeMgr/gv9udeI7xu7Wc=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c2 = GoalInfo;\nconst CREATE_GOAL = gql`\n  mutation CreateGoal($summary: String!, $details: String!){\n    createGoal (summary: $summary, details: $details){\n      id\n      summary\n      details\n  }\n}\n`;\nexport function CreateGoal() {\n  _s2();\n\n  let inputDetails, inputSummary;\n  const [createGoal, {\n    data\n  }] = useMutation(CREATE_GOAL);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: e => {\n        e.preventDefault();\n        createGoal({\n          variables: {\n            details: inputDetails.value,\n            summary: inputSummary.value\n          }\n        }); // setTimeout(() => {  console.log(inputDetails.value); }, 2000);\n\n        inputDetails.value = '';\n        inputSummary.value = '';\n        window.location.reload();\n      },\n      style: {\n        marginTop: '2em',\n        marginBottom: '2em'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Details: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: node => {\n          inputDetails = node;\n        },\n        style: {\n          marginRight: '1em'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Summary: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: node => {\n          inputSummary = node;\n        },\n        style: {\n          marginRight: '1em'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        class: \"uk-button uk-button-primary\",\n        style: {\n          cursor: 'pointer'\n        },\n        children: \"Add a Goal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n} // So this is the graphql that will delete a specific goal\n// mutation {\n//   deleteGoal (summary:\"test\") {\n//     goal {\n//       summary\n//       details\n//     }\n//   }\n// }\n\n_s2(CreateGoal, \"MckIBTqls/PFESxtojNymopkcAE=\", false, function () {\n  return [useMutation];\n});\n\n_c3 = CreateGoal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"DeleteGoal\");\n$RefreshReg$(_c2, \"GoalInfo\");\n$RefreshReg$(_c3, \"CreateGoal\");","map":{"version":3,"sources":["C:/Users/TrevorArnold/Documents/programming/goals/frontend/app/src/Goals.js"],"names":["React","useQuery","useMutation","gql","QUERY_GOALS","DELETE_GOAL","DeleteGoal","keyId","deleteGoal","inputID","variables","id","window","location","reload","GoalInfo","data","loading","pollInterval","allGoals","map","summary","details","CREATE_GOAL","CreateGoal","inputDetails","inputSummary","createGoal","e","preventDefault","value","marginTop","marginBottom","node","marginRight","cursor"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useQuery, useMutation } from 'react-apollo';\r\nimport { gql } from 'apollo-boost';\r\nconst QUERY_GOALS = gql`\r\nquery {\r\n    allGoals {\r\n      id\r\n      summary\r\n      details\r\n    }\r\n  }\r\n`;\r\n\r\n\r\n\r\nconst DELETE_GOAL = gql`\r\n  mutation DeleteGoal($id: ID!){\r\n    deleteGoal (id: $id) {\r\n      goal{\r\n        id\r\n        summary\r\n        details\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst DeleteGoal = (keyId, deleteGoal) => {\r\n  let inputID;\r\n  inputID = keyId;\r\n  deleteGoal({ variables: {id:inputID}});\r\n  window.location.reload();\r\n}\r\n\r\nexport function GoalInfo() {\r\n  // Polling: provides near-real-time synchronization with\r\n  // your server by causing a query to execute periodically\r\n  // at a specified interval\r\n  const { data, loading } = useQuery(\r\n    QUERY_GOALS, {\r\n      pollInterval: 500 // refetch the result every 0.5 second\r\n    }\r\n  );\r\n  const [deleteGoal] = useMutation(DELETE_GOAL);\r\n  // should handle loading status\r\n  if (loading) return <p>Loading...</p>;\r\n   \r\n  return data.allGoals.map(({ id, summary, details }) => (\r\n    <div key={id}>\r\n        <h3>{id}: {summary}</h3>\r\n        <span>{details}\r\n        <button class=\"uk-button uk-button-danger\" onClick={() => deleteGoal({\r\n          variables: {id:id}})\r\n        }>Delete</button></span>\r\n        <hr class=\"uk-divider-icon\"/>\r\n    </div>\r\n  ));\r\n}\r\n\r\nconst CREATE_GOAL = gql`\r\n  mutation CreateGoal($summary: String!, $details: String!){\r\n    createGoal (summary: $summary, details: $details){\r\n      id\r\n      summary\r\n      details\r\n  }\r\n}\r\n`;\r\n\r\nexport function CreateGoal() {\r\n  let inputDetails, inputSummary;\r\n  const [createGoal, { data } ] = useMutation(CREATE_GOAL);\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={e => {\r\n          e.preventDefault();\r\n          createGoal({ variables: { \r\n            details: inputDetails.value,\r\n            summary: inputSummary.value\r\n        }});\r\n        // setTimeout(() => {  console.log(inputDetails.value); }, 2000);\r\n        inputDetails.value = '';\r\n        inputSummary.value = '';\r\n        window.location.reload();\r\n      }}\r\n      style = {{ marginTop: '2em', marginBottom: '2em' }}\r\n     >\r\n     <label>Details: </label>\r\n     <input\r\n       ref={node => {\r\n        inputDetails = node;\r\n       }}\r\n       style={{ marginRight: '1em' }}\r\n     />\r\n     <label>Summary: </label>\r\n     <input\r\n       ref={node => {\r\n         inputSummary = node;\r\n       }}\r\n       style={{ marginRight: '1em' }}\r\n     />\r\n     \r\n     <button type=\"submit\" class=\"uk-button uk-button-primary\" \r\n              style={{ cursor: 'pointer' }}>Add a Goal</button>\r\n    </form>\r\n   </div>\r\n  );}\r\n\r\n\r\n\r\n// So this is the graphql that will delete a specific goal\r\n// mutation {\r\n//   deleteGoal (summary:\"test\") {\r\n//     goal {\r\n//       summary\r\n//       details\r\n//     }\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}