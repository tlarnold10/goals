[{"D:\\trevor\\programming\\goals\\goals\\src\\index.tsx":"1","D:\\trevor\\programming\\goals\\goals\\src\\reportWebVitals.ts":"2","D:\\trevor\\programming\\goals\\goals\\src\\App.tsx":"3","D:\\trevor\\programming\\goals\\goals\\src\\Sugar.tsx":"4","D:\\trevor\\programming\\goals\\goals\\src\\Goals.tsx":"5"},{"size":500,"mtime":1611938962960,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1611771096098,"results":"8","hashOfConfig":"7"},{"size":1157,"mtime":1611938981371,"results":"9","hashOfConfig":"7"},{"size":2604,"mtime":1611938973085,"results":"10","hashOfConfig":"7"},{"size":3721,"mtime":1611938956236,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"t7y0hm",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"D:\\trevor\\programming\\goals\\goals\\src\\index.tsx",[],["25","26"],"D:\\trevor\\programming\\goals\\goals\\src\\reportWebVitals.ts",[],"D:\\trevor\\programming\\goals\\goals\\src\\App.tsx",[],"D:\\trevor\\programming\\goals\\goals\\src\\Sugar.tsx",["27","28"],"import React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\nconst QUERY_SUGAR = gql`\nquery {\n    allSugar {\n      id,\n      grams,\n      date\n    }\n  }\n`;\n\n\nconst DELETE_SUGAR = gql`\n  mutation DeleteSugar($id: ID!){\n    deleteSugar (id: $id) {\n      sugar{\n        id\n        grams\n        date\n      }\n    }\n  }\n`;\n\nconst DeleteSugar = (keyId, deleteSugar) => {\n  let inputID;\n  inputID = keyId;\n  deleteSugar({ variables: {id:inputID}});\n  window.location.reload();\n}\n\n\nexport function SugarInfo() {\n  const { data, loading } = useQuery(\n    QUERY_SUGAR, {\n      pollInterval: 500 // refetch the result every 0.5 second\n    }\n  );\n  const [deleteSugar] = useMutation(DELETE_SUGAR)\n  if (loading) return <p>Loading...</p>;\n   \n  return data.allSugar.map(({ id, date, grams }) => (\n    <div class=\"uk-card uk-card-default uk-card-body\" key={id}>\n        <h3>Date: {date}</h3>\n            <p>Sugar Intake: {grams} grams</p>\n            <button class=\"uk-button uk-button-danger\" onClick={() => deleteSugar({\n                                                                        variables: {id:id}})\n            }>Delete</button>\n    </div>\n  ));\n}\n\n\nconst CREATE_SUGAR = gql`\n  mutation CreateSugar($grams: Int!, $date: String!){\n    createSugar (grams: $grams, date: $date){\n      grams\n      date\n  }\n}\n`;\n\nexport function CreateSugar() {\n  let inputGrams, inputDate;\n  const [createSugar, { data } ] = useMutation(CREATE_SUGAR);\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          createSugar({ variables: { \n            grams: inputGrams.value,\n            date: inputDate.value\n        }});\n        inputGrams.value = '';\n        inputGrams.value = '';\n        // window.location.reload();\n      }}\n      style = {{ marginTop: '2em', marginBottom: '2em' }}\n     >\n     <label class=\"uk-form-label\" >Sugar Intake (grams): </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" \n       ref={node => {\n         inputGrams = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>   \n     <br/> \n     <label class=\"uk-form-label\" >Today's Date: </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" type=\"text\" data-uk-datepicker=\"{format:'DD.MM.YYYY'}\"\n       ref={node => {\n         inputDate = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>   \n     <br/> \n     \n     <button type=\"submit\" class=\"uk-button uk-button-primary\" \n              style={{ cursor: 'pointer' }}>Log</button>\n    </form>\n   </div>\n  );}","D:\\trevor\\programming\\goals\\goals\\src\\Goals.tsx",["29","30","31"],"import React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport { useState } from 'react';\nconst QUERY_GOALS = gql`\nquery {\n    allGoals {\n      id\n      summary\n      details\n    }\n  }\n`;\n\n\n\nconst DELETE_GOAL = gql`\n  mutation DeleteGoal($id: ID!){\n    deleteGoal (id: $id) {\n      goal{\n        id\n        summary\n        details\n      }\n    }\n  }\n`;\n\nconst EDIT_GOAL = gql`\n  mutation UpdateGoal($id: ID!, $details: String!) {\n    updateGoal(id: $id, details: $details) {\n      goal {\n        id\n        details\n      }\n    }\n  }\n`;\n\nconst DeleteGoal = (keyId, deleteGoal) => {\n  let inputID;\n  inputID = keyId;\n  deleteGoal({ variables: {id:inputID}});\n  window.location.reload();\n}\n\nconst EditGoal = (keyId, editGoal) => {\n  let inputID;\n  inputID = keyId;\n  editGoal({ variables: {id:inputID}});\n  window.location.reload();\n}\n\nexport function GoalInfo() {\n  // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n  const { data, loading } = useQuery(\n    QUERY_GOALS, {\n      pollInterval: 500 // refetch the result every 0.5 second\n    }\n  );\n  const [deleteGoal] = useMutation(DELETE_GOAL);\n  const [editGoal] = useMutation(EDIT_GOAL);\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n  let inputDetails;\n   \n  return data.allGoals.map(({ id, summary, details }) => (\n    <div key={id}>\n        <h3>Goal: {summary}</h3>\n          <div class=\"uk-card uk-card-default uk-card-body\">\n            <p>Goal Details:</p>\n            <input class=\"uk-input\" type=\"text\" defaultValue={ details }\n              ref={node => {\n                inputDetails = node;\n              }}\n              style={{ marginRight: '1em' }}\n            />\n          </div>\n          <div class=\"uk-card uk-card-default uk-card-body\">\n            <button class=\"uk-button uk-button-secondary\" onClick={() => editGoal({\n              variables: {id:id, details: inputDetails.value}})}>Save</button>\n            <span>&emsp;&emsp;</span>\n            <button class=\"uk-button uk-button-danger\" onClick={() => deleteGoal({\n              variables: {id:id}})}>Delete</button>\n        </div>\n        <hr class=\"uk-divider-icon\"/>\n    </div>\n  ));\n}\n\nconst CREATE_GOAL = gql`\n  mutation CreateGoal($summary: String!, $details: String!){\n    createGoal (summary: $summary, details: $details){\n      id\n      summary\n      details\n  }\n}\n`;\n\nexport function CreateGoal() {\n  let inputDetails, inputSummary;\n  const [createGoal] = useMutation(CREATE_GOAL);\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          createGoal({ variables: { \n            details: inputDetails.value,\n            summary: inputSummary.value\n        }});\n        // setTimeout(() => {  console.log(inputDetails.value); }, 2000);\n        inputDetails.value = '';\n        inputSummary.value = '';\n        window.location.reload();\n      }}\n      style = {{ marginTop: '2em', marginBottom: '2em' }}\n     >\n     <label class=\"uk-form-label\" >Summary: </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" \n       ref={node => {\n         inputSummary = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>\n     <label class=\"uk-form-label\" >Details: </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" \n       ref={node => {\n        inputDetails = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>    \n     <br/> \n     <button type=\"submit\" class=\"uk-button uk-button-primary\" \n              style={{ cursor: 'pointer' }}>Add a Goal</button>\n    </form>\n   </div>\n  );}\n\n",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":28,"column":7,"nodeType":"38","messageId":"39","endLine":28,"endColumn":18},{"ruleId":"36","severity":1,"message":"40","line":68,"column":25,"nodeType":"38","messageId":"39","endLine":68,"endColumn":29},{"ruleId":"36","severity":1,"message":"41","line":4,"column":10,"nodeType":"38","messageId":"39","endLine":4,"endColumn":18},{"ruleId":"36","severity":1,"message":"42","line":40,"column":7,"nodeType":"38","messageId":"39","endLine":40,"endColumn":17},{"ruleId":"36","severity":1,"message":"43","line":47,"column":7,"nodeType":"38","messageId":"39","endLine":47,"endColumn":15},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"@typescript-eslint/no-unused-vars","'DeleteSugar' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","'useState' is defined but never used.","'DeleteGoal' is assigned a value but never used.","'EditGoal' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]