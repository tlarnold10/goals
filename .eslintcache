[{"D:\\trevor\\programming\\goals\\goals\\src\\index.js":"1","D:\\trevor\\programming\\goals\\goals\\src\\reportWebVitals.js":"2","D:\\trevor\\programming\\goals\\goals\\src\\App.js":"3","D:\\trevor\\programming\\goals\\goals\\src\\Sugar.js":"4","D:\\trevor\\programming\\goals\\goals\\src\\Goals.js":"5"},{"size":500,"mtime":1609301518738,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609301518748,"results":"8","hashOfConfig":"7"},{"size":1169,"mtime":1610303344641,"results":"9","hashOfConfig":"7"},{"size":2604,"mtime":1610303344656,"results":"10","hashOfConfig":"7"},{"size":3721,"mtime":1611027569946,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"8oqclk",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"D:\\trevor\\programming\\goals\\goals\\src\\index.js",[],["26","27"],"D:\\trevor\\programming\\goals\\goals\\src\\reportWebVitals.js",[],"D:\\trevor\\programming\\goals\\goals\\src\\App.js",["28"],"import './App.css';\n\nimport React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { CreateGoal, GoalInfo, DeleteGoal  } from './Goals';\nimport { CreateSugar, SugarInfo } from './Sugar'\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:8000/graphql/',\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors)\n    console.log('networkError', networkError)\n  }\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <div  class=\"uk-container\" style={{\n      backgroundColor: '#00000008',\n      display: 'flex',\n      justifyContent: 'left',\n      alignItems:'left',\n      flexDirection: 'column'\n    }}>\n    <h1 class=\"uk-heading-bullet\">Let's set some goals and crush them!</h1>\n    <CreateGoal/>\n    <div class=\"uk-child-width-expand@s uk-text-center\" uk-grid> \n      <GoalInfo/> \n    </div>\n       \n    <h1 class=\"uk-heading-bullet\">You need to cut back on the sugar bro!</h1>\n    <CreateSugar/>\n    <div class=\"uk-child-width-expand@s uk-text-center\" uk-grid> \n      <SugarInfo/>\n    </div>\n    </div>\n  </ApolloProvider>\n\n);\n\nexport default App;\n","D:\\trevor\\programming\\goals\\goals\\src\\Sugar.js",["29","30"],"import React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\nconst QUERY_SUGAR = gql`\nquery {\n    allSugar {\n      id,\n      grams,\n      date\n    }\n  }\n`;\n\n\nconst DELETE_SUGAR = gql`\n  mutation DeleteSugar($id: ID!){\n    deleteSugar (id: $id) {\n      sugar{\n        id\n        grams\n        date\n      }\n    }\n  }\n`;\n\nconst DeleteSugar = (keyId, deleteSugar) => {\n  let inputID;\n  inputID = keyId;\n  deleteSugar({ variables: {id:inputID}});\n  window.location.reload();\n}\n\n\nexport function SugarInfo() {\n  const { data, loading } = useQuery(\n    QUERY_SUGAR, {\n      pollInterval: 500 // refetch the result every 0.5 second\n    }\n  );\n  const [deleteSugar] = useMutation(DELETE_SUGAR)\n  if (loading) return <p>Loading...</p>;\n   \n  return data.allSugar.map(({ id, date, grams }) => (\n    <div class=\"uk-card uk-card-default uk-card-body\" key={id}>\n        <h3>Date: {date}</h3>\n            <p>Sugar Intake: {grams} grams</p>\n            <button class=\"uk-button uk-button-danger\" onClick={() => deleteSugar({\n                                                                        variables: {id:id}})\n            }>Delete</button>\n    </div>\n  ));\n}\n\n\nconst CREATE_SUGAR = gql`\n  mutation CreateSugar($grams: Int!, $date: String!){\n    createSugar (grams: $grams, date: $date){\n      grams\n      date\n  }\n}\n`;\n\nexport function CreateSugar() {\n  let inputGrams, inputDate;\n  const [createSugar, { data } ] = useMutation(CREATE_SUGAR);\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          createSugar({ variables: { \n            grams: inputGrams.value,\n            date: inputDate.value\n        }});\n        inputGrams.value = '';\n        inputGrams.value = '';\n        // window.location.reload();\n      }}\n      style = {{ marginTop: '2em', marginBottom: '2em' }}\n     >\n     <label class=\"uk-form-label\" >Sugar Intake (grams): </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" \n       ref={node => {\n         inputGrams = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>   \n     <br/> \n     <label class=\"uk-form-label\" >Today's Date: </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" type=\"text\" data-uk-datepicker=\"{format:'DD.MM.YYYY'}\"\n       ref={node => {\n         inputDate = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>   \n     <br/> \n     \n     <button type=\"submit\" class=\"uk-button uk-button-primary\" \n              style={{ cursor: 'pointer' }}>Log</button>\n    </form>\n   </div>\n  );}","D:\\trevor\\programming\\goals\\goals\\src\\Goals.js",["31","32","33"],"import React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport { useState } from 'react';\nconst QUERY_GOALS = gql`\nquery {\n    allGoals {\n      id\n      summary\n      details\n    }\n  }\n`;\n\n\n\nconst DELETE_GOAL = gql`\n  mutation DeleteGoal($id: ID!){\n    deleteGoal (id: $id) {\n      goal{\n        id\n        summary\n        details\n      }\n    }\n  }\n`;\n\nconst EDIT_GOAL = gql`\n  mutation UpdateGoal($id: ID!, $details: String!) {\n    updateGoal(id: $id, details: $details) {\n      goal {\n        id\n        details\n      }\n    }\n  }\n`;\n\nconst DeleteGoal = (keyId, deleteGoal) => {\n  let inputID;\n  inputID = keyId;\n  deleteGoal({ variables: {id:inputID}});\n  window.location.reload();\n}\n\nconst EditGoal = (keyId, editGoal) => {\n  let inputID;\n  inputID = keyId;\n  editGoal({ variables: {id:inputID}});\n  window.location.reload();\n}\n\nexport function GoalInfo() {\n  // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n  const { data, loading } = useQuery(\n    QUERY_GOALS, {\n      pollInterval: 500 // refetch the result every 0.5 second\n    }\n  );\n  const [deleteGoal] = useMutation(DELETE_GOAL);\n  const [editGoal] = useMutation(EDIT_GOAL);\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n  let inputDetails;\n   \n  return data.allGoals.map(({ id, summary, details }) => (\n    <div key={id}>\n        <h3>Goal: {summary}</h3>\n          <div class=\"uk-card uk-card-default uk-card-body\">\n            <p>Goal Details:</p>\n            <input class=\"uk-input\" type=\"text\" defaultValue={ details }\n              ref={node => {\n                inputDetails = node;\n              }}\n              style={{ marginRight: '1em' }}\n            />\n          </div>\n          <div class=\"uk-card uk-card-default uk-card-body\">\n            <button class=\"uk-button uk-button-secondary\" onClick={() => editGoal({\n              variables: {id:id, details: inputDetails.value}})}>Save</button>\n            <span>&emsp;&emsp;</span>\n            <button class=\"uk-button uk-button-danger\" onClick={() => deleteGoal({\n              variables: {id:id}})}>Delete</button>\n        </div>\n        <hr class=\"uk-divider-icon\"/>\n    </div>\n  ));\n}\n\nconst CREATE_GOAL = gql`\n  mutation CreateGoal($summary: String!, $details: String!){\n    createGoal (summary: $summary, details: $details){\n      id\n      summary\n      details\n  }\n}\n`;\n\nexport function CreateGoal() {\n  let inputDetails, inputSummary;\n  const [createGoal] = useMutation(CREATE_GOAL);\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          createGoal({ variables: { \n            details: inputDetails.value,\n            summary: inputSummary.value\n        }});\n        // setTimeout(() => {  console.log(inputDetails.value); }, 2000);\n        inputDetails.value = '';\n        inputSummary.value = '';\n        window.location.reload();\n      }}\n      style = {{ marginTop: '2em', marginBottom: '2em' }}\n     >\n     <label class=\"uk-form-label\" >Summary: </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" \n       ref={node => {\n         inputSummary = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>\n     <label class=\"uk-form-label\" >Details: </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" \n       ref={node => {\n        inputDetails = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>    \n     <br/> \n     <button type=\"submit\" class=\"uk-button uk-button-primary\" \n              style={{ cursor: 'pointer' }}>Add a Goal</button>\n    </form>\n   </div>\n  );}\n\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":6,"column":32,"nodeType":"40","messageId":"41","endLine":6,"endColumn":42},{"ruleId":"38","severity":1,"message":"42","line":28,"column":7,"nodeType":"40","messageId":"41","endLine":28,"endColumn":18},{"ruleId":"38","severity":1,"message":"43","line":68,"column":25,"nodeType":"40","messageId":"41","endLine":68,"endColumn":29},{"ruleId":"38","severity":1,"message":"44","line":4,"column":10,"nodeType":"40","messageId":"41","endLine":4,"endColumn":18},{"ruleId":"38","severity":1,"message":"45","line":40,"column":7,"nodeType":"40","messageId":"41","endLine":40,"endColumn":17},{"ruleId":"38","severity":1,"message":"46","line":47,"column":7,"nodeType":"40","messageId":"41","endLine":47,"endColumn":15},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'DeleteGoal' is defined but never used.","Identifier","unusedVar","'DeleteSugar' is assigned a value but never used.","'data' is assigned a value but never used.","'useState' is defined but never used.","'DeleteGoal' is assigned a value but never used.","'EditGoal' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]