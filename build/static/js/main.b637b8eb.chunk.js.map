{"version":3,"sources":["Goals.tsx","Sugar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["QUERY_GOALS","gql","DELETE_GOAL","EDIT_GOAL","GoalInfo","inputDetails","useQuery","pollInterval","data","loading","useMutation","deleteGoal","editGoal","allGoals","map","id","summary","details","class","type","defaultValue","ref","node","style","marginRight","onClick","variables","value","CREATE_GOAL","CreateGoal","inputSummary","createGoal","onSubmit","e","preventDefault","window","location","reload","marginTop","marginBottom","cursor","QUERY_SUGAR","DELETE_SUGAR","SugarInfo","deleteSugar","allSugar","date","grams","CREATE_SUGAR","CreateSugar","inputGrams","inputDate","createSugar","data-uk-datepicker","client","ApolloClient","uri","onError","networkError","graphQLErrors","console","log","App","backgroundColor","display","justifyContent","alignItems","flexDirection","uk-grid","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b637b8eb.chunk.js","sourcesContent":["import React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport { useState } from 'react';\nconst QUERY_GOALS = gql`\nquery {\n    allGoals {\n      id\n      summary\n      details\n    }\n  }\n`;\n\n\n\nconst DELETE_GOAL = gql`\n  mutation DeleteGoal($id: ID!){\n    deleteGoal (id: $id) {\n      goal{\n        id\n        summary\n        details\n      }\n    }\n  }\n`;\n\nconst EDIT_GOAL = gql`\n  mutation UpdateGoal($id: ID!, $details: String!) {\n    updateGoal(id: $id, details: $details) {\n      goal {\n        id\n        details\n      }\n    }\n  }\n`;\n\nconst DeleteGoal = (keyId, deleteGoal) => {\n  let inputID;\n  inputID = keyId;\n  deleteGoal({ variables: {id:inputID}});\n  window.location.reload();\n}\n\nconst EditGoal = (keyId, editGoal) => {\n  let inputID;\n  inputID = keyId;\n  editGoal({ variables: {id:inputID}});\n  window.location.reload();\n}\n\nexport function GoalInfo() {\n  // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n  const { data, loading } = useQuery(\n    QUERY_GOALS, {\n      pollInterval: 500 // refetch the result every 0.5 second\n    }\n  );\n  const [deleteGoal] = useMutation(DELETE_GOAL);\n  const [editGoal] = useMutation(EDIT_GOAL);\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n  let inputDetails;\n   \n  return data.allGoals.map(({ id, summary, details }) => (\n    <div key={id}>\n        <h3>Goal: {summary}</h3>\n          <div class=\"uk-card uk-card-default uk-card-body\">\n            <p>Goal Details:</p>\n            <input class=\"uk-input\" type=\"text\" defaultValue={ details }\n              ref={node => {\n                inputDetails = node;\n              }}\n              style={{ marginRight: '1em' }}\n            />\n          </div>\n          <div class=\"uk-card uk-card-default uk-card-body\">\n            <button class=\"uk-button uk-button-secondary\" onClick={() => editGoal({\n              variables: {id:id, details: inputDetails.value}})}>Save</button>\n            <span>&emsp;&emsp;</span>\n            <button class=\"uk-button uk-button-danger\" onClick={() => deleteGoal({\n              variables: {id:id}})}>Delete</button>\n        </div>\n        <hr class=\"uk-divider-icon\"/>\n    </div>\n  ));\n}\n\nconst CREATE_GOAL = gql`\n  mutation CreateGoal($summary: String!, $details: String!){\n    createGoal (summary: $summary, details: $details){\n      id\n      summary\n      details\n  }\n}\n`;\n\nexport function CreateGoal() {\n  let inputDetails, inputSummary;\n  const [createGoal] = useMutation(CREATE_GOAL);\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          createGoal({ variables: { \n            details: inputDetails.value,\n            summary: inputSummary.value\n        }});\n        // setTimeout(() => {  console.log(inputDetails.value); }, 2000);\n        inputDetails.value = '';\n        inputSummary.value = '';\n        window.location.reload();\n      }}\n      style = {{ marginTop: '2em', marginBottom: '2em' }}\n     >\n     <label class=\"uk-form-label\" >Summary: </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" \n       ref={node => {\n         inputSummary = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>\n     <label class=\"uk-form-label\" >Details: </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" \n       ref={node => {\n        inputDetails = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>    \n     <br/> \n     <button type=\"submit\" class=\"uk-button uk-button-primary\" \n              style={{ cursor: 'pointer' }}>Add a Goal</button>\n    </form>\n   </div>\n  );}\n\n","import React from 'react';\nimport { useQuery, useMutation } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\nconst QUERY_SUGAR = gql`\nquery {\n    allSugar {\n      id,\n      grams,\n      date\n    }\n  }\n`;\n\n\nconst DELETE_SUGAR = gql`\n  mutation DeleteSugar($id: ID!){\n    deleteSugar (id: $id) {\n      sugar{\n        id\n        grams\n        date\n      }\n    }\n  }\n`;\n\nconst DeleteSugar = (keyId, deleteSugar) => {\n  let inputID;\n  inputID = keyId;\n  deleteSugar({ variables: {id:inputID}});\n  window.location.reload();\n}\n\n\nexport function SugarInfo() {\n  const { data, loading } = useQuery(\n    QUERY_SUGAR, {\n      pollInterval: 500 // refetch the result every 0.5 second\n    }\n  );\n  const [deleteSugar] = useMutation(DELETE_SUGAR)\n  if (loading) return <p>Loading...</p>;\n   \n  return data.allSugar.map(({ id, date, grams }) => (\n    <div class=\"uk-card uk-card-default uk-card-body\" key={id}>\n        <h3>Date: {date}</h3>\n            <p>Sugar Intake: {grams} grams</p>\n            <button class=\"uk-button uk-button-danger\" onClick={() => deleteSugar({\n                                                                        variables: {id:id}})\n            }>Delete</button>\n    </div>\n  ));\n}\n\n\nconst CREATE_SUGAR = gql`\n  mutation CreateSugar($grams: Int!, $date: String!){\n    createSugar (grams: $grams, date: $date){\n      grams\n      date\n  }\n}\n`;\n\nexport function CreateSugar() {\n  let inputGrams, inputDate;\n  const [createSugar, { data } ] = useMutation(CREATE_SUGAR);\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          createSugar({ variables: { \n            grams: inputGrams.value,\n            date: inputDate.value\n        }});\n        inputGrams.value = '';\n        inputGrams.value = '';\n        // window.location.reload();\n      }}\n      style = {{ marginTop: '2em', marginBottom: '2em' }}\n     >\n     <label class=\"uk-form-label\" >Sugar Intake (grams): </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" \n       ref={node => {\n         inputGrams = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>   \n     <br/> \n     <label class=\"uk-form-label\" >Today's Date: </label>\n     <div class=\"uk-form-controls\">\n     <input class=\"uk-input\" type=\"text\" data-uk-datepicker=\"{format:'DD.MM.YYYY'}\"\n       ref={node => {\n         inputDate = node;\n       }}\n       style={{ marginRight: '1em' }}\n     />\n     </div>   \n     <br/> \n     \n     <button type=\"submit\" class=\"uk-button uk-button-primary\" \n              style={{ cursor: 'pointer' }}>Log</button>\n    </form>\n   </div>\n  );}","import './App.css';\n\nimport React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { CreateGoal, GoalInfo  } from './Goals';\nimport { CreateSugar, SugarInfo } from './Sugar'\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:8000/graphql/',\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors)\n    console.log('networkError', networkError)\n  }\n});\n\nconst App = () => (\n  <ApolloProvider client={client}>\n    <div  class=\"uk-container\" style={{\n      backgroundColor: '#00000008',\n      display: 'flex',\n      justifyContent: 'left',\n      alignItems:'left',\n      flexDirection: 'column'\n    }}>\n    <h1 class=\"uk-heading-bullet\">Let's set some goals and crush them!</h1>\n    <CreateGoal/>\n    <div class=\"uk-child-width-expand@s uk-text-center\" uk-grid> \n      <GoalInfo/> \n    </div>\n       \n    <h1 class=\"uk-heading-bullet\">You need to cut back on the sugar bro!</h1>\n    <CreateSugar/>\n    <div class=\"uk-child-width-expand@s uk-text-center\" uk-grid> \n      <SugarInfo/>\n    </div>\n    </div>\n  </ApolloProvider>\n\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}